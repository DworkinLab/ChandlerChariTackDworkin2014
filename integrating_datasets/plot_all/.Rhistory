a = NULL
a
is.null(a)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
illumina.thresh <- 0.01#
dgrc.thresh <- 0.001#
src.thresh <- 0.01#
dge.thresh <- 0.0001#
pdf.width <- 12#
pdf.height <- 5#
#
#
#plot.region("X", thresh=thresh)#
#plot.region("2L", thresh=thresh)#
#plot.region("2R", thresh=thresh)#
#plot.region("3L", thresh=thresh)#
#plot.region("3R", thresh=thresh)#
#plot.region("3L", xlim=c(0,1e6), thresh=0.001, plot.gene.names=TRUE)#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, illumina.thresh=illumina.thresh, dgrc.thresh=dgrc.thresh, src.thresh=src.thresh, dge.thresh=dge.thresh, chrom=c)#
}#
#
##Zoom in on the following regions...#
#plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
##
#plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
##
#plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
##
#plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)#
#plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh=thresh)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
illumina.thresh <- 0.01#
dgrc.thresh <- 0.001#
src.thresh <- 0.01#
dge.thresh <- 0.001#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, dge.thresh=NULL, dgrc.thresh=NULL, illumina.thresh=NULL, src.thresh=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, dge.thresh=dge.thresh, dgrc.thresh=dgrc.thresh, illumina.thresh=illumina.thresh, src.thresh=src.thresh)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, illumina.thresh=illumina.thresh, dgrc.thresh=dgrc.thresh, src.thresh=src.thresh, dge.thresh=dge.thresh, chrom=c)#
}
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
illumina.thresh <- 0.01#
dgrc.thresh <- 0.001#
src.thresh <- 0.01#
dge.thresh <- 0.001#
pdf.width <- 12#
pdf.height <- 5
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, dge.thresh=NULL, dgrc.thresh=NULL, illumina.thresh=NULL, src.thresh=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, dge.thresh=dge.thresh, dgrc.thresh=dgrc.thresh, illumina.thresh=illumina.thresh, src.thresh=src.thresh)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, illumina.thresh=illumina.thresh, dgrc.thresh=dgrc.thresh, src.thresh=src.thresh, dge.thresh=dge.thresh, chrom=c)#
}
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.01#
thresh.dgrc <- 0.001#
thresh.src <- 0.01#
thresh.dge <- 0.001#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.01#
thresh.dgrc <- 0.001#
thresh.src <- 0.01#
thresh.dge <- 0.001#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
##Zoom in on the following regions...#
#plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
##
#plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
##
#plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
##
#plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.005#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", plot.gene.names=TRUE, chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", plot.gene.names=TRUE,  chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", plot.gene.names=TRUE,  chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", plot.gene.names=TRUE,  chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", plot.gene.names=TRUE,  chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", plot.gene.names=TRUE,  chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", plot.gene.names=TRUE,  chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", plot.gene.names=TRUE,  chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", plot.gene.names=TRUE,  chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", plot.gene.names=TRUE,  chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", plot.gene.names=TRUE,  chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", plot.gene.names=TRUE,  chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", plot.gene.names=TRUE,  chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", plot.gene.names=TRUE,  chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
head(illumina.data)
ls()
head(illumina.results)
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01
chrom="2L"
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}
xlim <- NULL
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)
chrom <- "2L"
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}
xlim <- NULL
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]
	gene.y <- 0.06 #How far above the line to plot gene names
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")
sidebar.cex <- 0.8
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)
thresh.src <- 0.01
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)
dev.off()
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3
thresh.illumina <- 0.01
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}
plot.gene.names <- TRUE
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}
cur.illumina.sig.info
plot.gene.names
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src, plot.gene.names=plot.gene.names)#
	dev.off()#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (plot.gene.names) print "asdf"#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (plot.gene.names) print("asdf")#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names && (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
TRUE && TRUE
TRUE & TRUE
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$name[i]) > 0)) {#
			print("asdfadsfasdfasdfadsfads")#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names) { # & (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		head(cur.illumina.sig.info)#
		if (plot.gene.names) { # & (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		print(head(cur.illumina.sig.info))#
		if (plot.gene.names) { # & (length(cur.illumina.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$name[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$name[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$name[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		print(head(cur.illumina.sig.info))#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("ILLUMINA", cur.illumina.sig.info$symbol[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGRC", cur.dgrc.sig.info$symbol[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
			print(paste("DGE", cur.dge.sig.info$symbol[i]))#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		print(head(cur.illumina.sig.info))#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
head(dge.results)
dge.results[dge.results$gene=="vg",]
dge.results[dge.results$gene=="vestigial",]
head(illumina.results)
head(flybase.data)
flybase.data[flybase.data$symbol=="vestigial"]
flybase.data[flybase.data$symbol=="vestigial",]
flybase.data[flybase.data$symbol=="vg",]
head(illumina.results)
illumina.results[illumina.results$fbgn=="FBgn0003975",]
head(dgrc.results)
dgrc.results[dgrc.results$fbgn=="FBgn0003975",]
head(dge.results)
dge.results[dge.results$fbgn=="FBgn0003975",]
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".pdf", sep="")#
	plot.chrom.pdf(cur.file, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.pdf("2L_zoom_1.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1a.pdf", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1b.pdf", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1c.pdf", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("2R_zoom_1.pdf", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3L_zoom_1.pdf", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_2.pdf", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_3.pdf", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3L_zoom_4.pdf", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.pdf("3R_zoom_1.pdf", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1a.pdf", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_1b.pdf", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_2.pdf", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("3R_zoom_3.pdf", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
png.width <- 480*2#
png.height <- 480*1.5#
#
plot.chrom.png <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	png(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".png", sep="")#
	plot.chrom.png(cur.file, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.png("2L_zoom_1.png", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1a.png", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1b.png", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1c.png", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("2R_zoom_1.png", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3L_zoom_1.png", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_2.png", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_3.png", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_4.png", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3R_zoom_1.png", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1a.png", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1b.png", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_2.png", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_3.png", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
png.width <- 480*1.5#
png.height <- 480*1.5*.75#
#
plot.chrom.png <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	png(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".png", sep="")#
	plot.chrom.png(cur.file, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.png("2L_zoom_1.png", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1a.png", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1b.png", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1c.png", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("2R_zoom_1.png", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3L_zoom_1.png", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_2.png", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_3.png", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_4.png", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3R_zoom_1.png", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1a.png", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1b.png", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_2.png", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_3.png", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
png.width <- 480*3#
png.height <- 480*3*0.6#
#
plot.chrom.png <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	png(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".png", sep="")#
	plot.chrom.png(cur.file, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.png("2L_zoom_1.png", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1a.png", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1b.png", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1c.png", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("2R_zoom_1.png", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3L_zoom_1.png", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_2.png", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_3.png", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_4.png", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3R_zoom_1.png", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1a.png", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1b.png", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_2.png", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_3.png", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
?png
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
png.width <- 480*3#
png.height <- 480*3*0.6#
#
plot.chrom.png <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	png(filename, width=width, height=height, res=72*2)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".png", sep="")#
	plot.chrom.png(cur.file, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.png("2L_zoom_1.png", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1a.png", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1b.png", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1c.png", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("2R_zoom_1.png", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3L_zoom_1.png", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_2.png", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_3.png", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_4.png", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3R_zoom_1.png", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1a.png", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1b.png", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_2.png", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_3.png", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8) {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
png.width <- 480*3#
png.height <- 480*3*0.6#
#
plot.chrom.png <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	png(filename, width=width, height=height, res=72*2.25)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}#
#
#
#Make a PDF for each chromosome#
chroms <- c("X", "2L", "2R", "3L", "3R")#
for (c in chroms) {#
	cur.file <- paste("chrom_", c, ".png", sep="")#
	plot.chrom.png(cur.file, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, chrom=c)#
}#
#
#Zoom in on the following regions...#
plot.chrom.png("2L_zoom_1.png", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1a.png", chrom="2L", xlim=c(6e6, 6.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1b.png", chrom="2L", xlim=c(8.6e6, 9.5e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("2L_zoom_1c.png", chrom="2L", xlim=c(9.7e6, 1.05e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("2R_zoom_1.png", chrom="2R", xlim=c(6e6, 9e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3L_zoom_1.png", chrom="3L", xlim=c(0, 1.05e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_2.png", chrom="3L", xlim=c(1.5e6, 2.2e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_3.png", chrom="3L", xlim=c(4.0e6, 6.0e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3L_zoom_4.png", chrom="3L", xlim=c(1.7e7, 1.95e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
#
plot.chrom.png("3R_zoom_1.png", chrom="3R", xlim=c(5e6, 1.1e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1a.png", chrom="3R", xlim=c(5.2e6, 6e6), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_1b.png", chrom="3R", xlim=c(9.6e6, 1.04e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_2.png", chrom="3R", xlim=c(1.15e7, 1.43e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.png("3R_zoom_3.png", chrom="3R", xlim=c(2.4e7, 2.5e7), plot.gene.names=TRUE, width=png.width, height=png.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
ls()
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8, which.effect="interactions") {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	if (which.effect=="interactions") {#
		cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	} else if (which.effect=="genotype") {#
		cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	} else if (which.effect=="background") {#
		cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	}#
	#
	#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	if (which.effect=="interactions") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	} else if (which.effect=="genotype") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	} else if (which.effect=="background") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	}#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	if (which.effect=="interactions") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	} else if (which.effect=="genotype") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	} else if (which.effect=="background") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	}#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	if (which.effect=="interactions") {#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	} else if (which.effect=="genotype") {#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	} else if (which.effect=="background") {#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	}#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5#
#
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}
head(src.results)
head(illumina.results)
head(dge.results)
dge.genotype.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_genotype_results.csv')
head(dge.genotype.results)
rm(list=ls())
###############################################################################
# Read in flybase (list of genes with fbgn/names/symbols, and chromosomal locations)###############################################################################
#
flybase.cols <- c("fbgn", "symbol", "chrom", "start", "stop")#
flybase.colClasses <- c("character", "character", "character", "numeric", "numeric")#
flybase.data <- read.csv("../../expression_scripts/flybase/flybase_map_table.csv", header=FALSE, colClasses=flybase.colClasses)#
colnames(flybase.data) <- flybase.cols#
newstart <- ifelse(flybase.data$start < flybase.data$stop, flybase.data$start, flybase.data$stop)#
newstop <- ifelse(flybase.data$stop > flybase.data$start, flybase.data$stop, flybase.data$start)#
flybase.data$start <- as.numeric(newstart)#
flybase.data$stop <- as.numeric(newstop)#
rm(newstart)#
rm(newstop)#
#Want the flybase data to be sorted by chromosome and then starting coordinates#
flybase.data <- flybase.data[order(flybase.data$start),]#
flybase.data <- flybase.data[order(flybase.data$chrom),]#
flybase.data$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(flybase.data)) #These values will be used for plotting#
#
#
#
###############################################################################
# Read in the DGRC, Illumina, DGE datasets#
# Here we're interested in background-dependence, so we want to use the p-values associated with the interactions#
###############################################################################
#
dgrc.results <- read.csv('../../expression_scripts/microarray_data/DGRC_summary_results.csv', header=TRUE)#
dgrc.results <- dgrc.results[,2:ncol(dgrc.results)]#
dgrc.results <- dgrc.results[grep("FBgn", dgrc.results$fbgn),]#
dgrc.results$fbgn <- as.character(dgrc.results$fbgn)#
#
illumina.results <- read.csv('../../expression_scripts/microarray_data/illumina_summary_results.csv', header=TRUE)#
colnames(illumina.results)[1] <- "gene"#
illumina.results <- illumina.results[grep("FBgn", illumina.results$fbgn),]#
illumina.results$fbgn <- as.character(illumina.results$fbgn)#
#
dge.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_allele_specific_results.csv', header=TRUE)#
dge.results$fbgn <- as.character(dge.results$fbgn)#
dge.results$gene <- as.character(dge.results$gene)#
dge.results <- dge.results[is.finite(dge.results$p.2),] #Remove those that we couldn't test for an interaction#
#
dge.genotype.results <- read.csv('../../expression_scripts/dge_r_analysis/dge_genotype_results.csv')#
#
###############################################################################
# Read in SRC modifier screen results#
###############################################################################
#
src.cols <- c("stock", "p.deletion", "p.background", "p.interaction", "chrom", "start", "stop")#
src.colclasses <- c("character", "numeric", "numeric", "numeric", "character", "numeric", "numeric")#
src.results <- read.csv("../../src_scripts/raw_deletion_results.csv", header=TRUE, colClasses=src.colclasses)#
colnames(src.results) <- src.cols#
#Sort and add y-values for plotting#
src.results <- src.results[order(src.results$start),]#
src.results <- src.results[order(src.results$chrom),]#
src.results$y <- rep(seq(from=0.1, to=0.9, by=0.1), length.out=nrow(src.results))#
#
#################################################################################
### Read in binding site data#
#################################################################################
###
##binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p")#
##binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
##binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
##colnames(binding.results) <- binding.cols#
#
################################################################################
## Read in backcross mapping data#
################################################################################
##
###Per gene#
##bc.cols <- c("fbgn", "chrom", "start", "stop", "strand", "name", "species", "symbol", "p.long", "p.short1", "p.short2", "p.short3", "p.short4")#
##bc.colclasses <- c("character", "character", "character", "character", "character", "character", "character", "character", "numeric", "numeric", "numeric", "numeric", "numeric")#
##bc.results.raw <- read.csv("../../sequencing_scripts/plotting_and_analysis/backcross_pvals.csv", header=TRUE, colClasses=bc.colclasses)#
##colnames(bc.results.raw) <- bc.cols#
#
#Across all short backcross replicates#
#
bc.results <- read.csv("freq_data_10kbwindows_2kbsteps.csv")#
#
#
###############################################################################
# Gets overlapping deletions for a particular gene#
###############################################################################
get.overlapping.deletions <- function(cur.chrom, cur.start, cur.stop) {#
	#
	cur.src.results <- src.results[src.results$chrom==cur.chrom,]#
	#A deletion overlaps the desired region if ONE of the following is met:#
	#  -Deletion contains entire region#
	#  -Entire region contains deletion#
	#  -Region starts between deletion's start and end#
	#  -Region ends between deletion's start and end#
	keeper.conditions <-     ((cur.src.results$start <= cur.start) & (cur.src.results$stop >= cur.stop)) |#
	                         ((cur.start <= cur.src.results$start) & (cur.stop >= cur.src.results$stop)) |#
	                         ((cur.start >= cur.src.results$start) & (cur.start <= cur.src.results$stop)) |#
	                         ((cur.stop >= cur.src.results$start)  & (cur.stop <= cur.src.results$stop))#
	cur.src.results <- cur.src.results[keeper.conditions,]#
	return(cur.src.results)#
}#
#
#
###############################################################################
# Accessory functions for plotting#
###############################################################################
#
get.chrom.size <- function(chrom) {#
	result <- max(bc.results$pos[bc.results$chrom==chrom])#
	return(result)#
}#
#
#
###############################################################################
# Important function: does the plotting!#
###############################################################################
#
#chrom <- "3L"#
#xlim <- NULL#
#thresh <- 0.01#
#
#Plots all the results for a chromosome region#
#1. Backcross data#
#2. Genes that are significant for DGE (interaction)#
#3. Genes that are significant for Illumina (interaction)#
#4. Genes that are significant for DGRC (interaction)#
#5. Significant modifier deletions (background-dependent)#
#6. TO DO LATER: Binding sites (if desired)#
plot.region <- function(chrom, xlim=NULL, thresh=0.01, thresh.illumina=NULL, thresh.dgrc=NULL, thresh.dge=NULL, thresh.src=NULL, plot.gene.names=FALSE, gene.cex=0.5, sidebar.cex=0.8, which.effect="interactions") {#
	#
	if (is.null(xlim)) {#
		xlim <- c(0, get.chrom.size(chrom))#
	}#
	#
	cur.flybase <- flybase.data[flybase.data$chrom==chrom,]#
	cur.src <- get.overlapping.deletions(chrom, xlim[1], xlim[2])#
	cur.dge <- dge.results[dge.results$fbgn %in% cur.flybase$fbgn,]#
	cur.illumina <- illumina.results[illumina.results$fbgn %in% cur.flybase$fbgn,]#
	cur.dgrc <- dgrc.results[dgrc.results$fbgn %in% cur.flybase$fbgn,]#
	cur.bc <- bc.results[bc.results$chrom==chrom,]#
	#
	#Some plotting options#
	gene.y <- 0.06 #How far above the line to plot gene names#
	#
	#Where to plot each of the different sources of data, and what colors to use...#
	src.y <- 1#
	src.color <- 2#
	illumina.y <- 4#
	illumina.color <- 3#
	dgrc.y <- 3#
	dgrc.color <- 4#
	dge.y <- 2#
	dge.color <- 6#
	#
	#Set up the plot window#
	par(mar=c(5,4,1,2)+0.1, cex=0.8)#
	xlab <- paste("Position along chromosome", chrom)#
	plot(x=NULL, y=NULL, xlim=xlim, ylim=c(0, 5), xlab=xlab, ylab="", yaxt="n")#
	caption.x <- xlim[1] - (xlim[2]-xlim[1])/50#
	#
	#Plot the backcross results#
	lines(bc.short.avg ~ pos, data=na.omit(cur.bc[,c("pos", "bc.short.avg")]), cex=0.25, col="grey70", lty=3)#
	points(bc.short.avg ~ pos, data=cur.bc, cex=0.5)#
	par(srt=90, cex=sidebar.cex)#
	text(x=caption.x, y=0.5, labels="Backcross")#
	#
	#Now plot any significant deletions#
	#In the zone 1:2#
	thresh.src <- ifelse(is.null(thresh.src), thresh, thresh.src)#
	if (which.effect=="interactions") {#
		cur.src.sig <- cur.src[cur.src$p.interaction < thresh.src,]#
	} else if (which.effect=="genotype") {#
		cur.src.sig <- cur.src[cur.src$p.deletion < thresh.src,]#
	} else if (which.effect=="background") {#
		cur.src.sig <- cur.src[cur.src$p.background < thresh.src,]#
	}#
	#
	#
	for (i in 1:nrow(cur.src.sig)) {#
		linewidth <- 1 + (-log(cur.src.sig$p.interaction[i]) / 10)#
		lines(x=c(cur.src.sig$start[i], cur.src.sig$stop[i]), y=rep(src.y+cur.src.sig$y[i],2), col=src.color, lwd=linewidth)#
	}#
	text(x=caption.x, y=0.5+src.y, labels="Modifier\nDeletions", col=src.color)#
	#
	gene.lwd <- 3#
	#
	#Now plot any significant Illumina results#
	thresh.illumina <- ifelse(is.null(thresh.illumina), thresh, thresh.illumina)#
	if (which.effect=="interactions") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$interaction.wt.sam.p < thresh.illumina]#
	} else if (which.effect=="genotype") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$genotype.wt.p < thresh.illumina]#
	} else if (which.effect=="background") {#
		cur.illumina.sig.genes <- cur.illumina$fbgn[cur.illumina$background.sam.p < thresh.illumina]#
	}#
	cur.illumina.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.illumina.sig.genes,]#
	for (i in 1:nrow(cur.illumina.sig.info)) {#
		lines(x=c(cur.illumina.sig.info$start[i], cur.illumina.sig.info$stop[i]), y=rep(illumina.y+cur.illumina.sig.info$y[i],2), col=illumina.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.illumina.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.illumina.sig.info$start[i], y=illumina.y+cur.illumina.sig.info$y[i]+gene.y, labels=cur.illumina.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+illumina.y, labels="Illumina", col=illumina.color)#
	#
	#Same for DGRC#
	thresh.dgrc <- ifelse(is.null(thresh.dgrc), thresh, thresh.dgrc)#
	if (which.effect=="interactions") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$interaction.wt.sam.p < thresh.dgrc]#
	} else if (which.effect=="genotype") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$genotype.wt.p < thresh.dgrc]#
	} else if (which.effect=="background") {#
		cur.dgrc.sig.genes <- cur.dgrc$fbgn[cur.dgrc$background.sam.p < thresh.dgrc]#
	}#
	cur.dgrc.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dgrc.sig.genes,]#
	for (i in 1:nrow(cur.dgrc.sig.info)) {#
		lines(x=c(cur.dgrc.sig.info$start[i], cur.dgrc.sig.info$stop[i]), y=rep(dgrc.y+cur.dgrc.sig.info$y[i],2), col=dgrc.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dgrc.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dgrc.sig.info$start[i], y=dgrc.y+cur.dgrc.sig.info$y[i]+gene.y, labels=cur.dgrc.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dgrc.y, "DGRC", col=dgrc.color)#
	#
	#Same for DGE#
	thresh.dge <- ifelse(is.null(thresh.dge), thresh, thresh.dge)#
	if (which.effect=="genotype") {#
		cur.dge <- dge.genotype.results[dge.genotype.results$fbgn %in% cur.flybase$fbgn,]#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p < thresh.dge]#
	} else if (which.effect=="interactions") {#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.2 < thresh.dge]#
	} else if (which.effect=="background") {#
		cur.dge.sig.genes <- cur.dge$fbgn[cur.dge$p.1 < thresh.dge]#
	}#
	cur.dge.sig.info <- cur.flybase[cur.flybase$fbgn %in% cur.dge.sig.genes,]#
	for (i in 1:nrow(cur.dge.sig.info)) {#
		lines(x=c(cur.dge.sig.info$start[i], cur.dge.sig.info$stop[i]), y=rep(dge.y+cur.dge.sig.info$y[i],2), col=dge.color, lwd=gene.lwd)#
		if (plot.gene.names & (length(cur.dge.sig.info$symbol[i]) > 0)) {#
			par(srt=0, cex=gene.cex)#
			text(x=cur.dge.sig.info$start[i], y=dge.y+cur.dge.sig.info$y[i]+gene.y, labels=cur.dge.sig.info$symbol[i])#
			par(srt=90, cex=sidebar.cex)#
		}#
	}#
	text(x=caption.x, y=0.5+dge.y, "DGE", col=dge.color)#
#
}#
#
###############################################################################
# Analysis#
###############################################################################
#
thresh.illumina <- 0.05#
thresh.dgrc <- 0.005#
thresh.src <- 0.01#
thresh.dge <- 0.01#
pdf.width <- 12#
pdf.height <- 5
plot.chrom.pdf("2L_zoom_1_testA.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL) {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src)#
	dev.off()#
}
plot.chrom.pdf("2L_zoom_1_testA.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf <- function(filename, width, height, thresh, chrom, xlim=NULL, plot.gene.names=FALSE, thresh.dge=NULL, thresh.dgrc=NULL, thresh.illumina=NULL, thresh.src=NULL, which.effect="interactions") {#
	pdf(filename, width=width, height=height)#
	plot.region(chrom, thresh=thresh, xlim=xlim, plot.gene.names=plot.gene.names, thresh.dge=thresh.dge, thresh.dgrc=thresh.dgrc, thresh.illumina=thresh.illumina, thresh.src=thresh.src, which.effect=which.effect)#
	dev.off()#
}
plot.chrom.pdf("2L_zoom_1_testA.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)
plot.chrom.pdf("2L_zoom_1_testInteraction.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge)#
plot.chrom.pdf("2L_zoom_1_testGenotype.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, which.effect="genotype")#
plot.chrom.pdf("2L_zoom_1_testBackground.pdf", chrom="2L", xlim=c(4.5e6, 1.1e7), plot.gene.names=TRUE, width=pdf.width, height=pdf.height, thresh.illumina=thresh.illumina, thresh.dgrc=thresh.dgrc, thresh.src=thresh.src, thresh.dge=thresh.dge, which.effect="background")
effects <- c("interactions", "genotype", "background")
effects
	chroms <- c("X", "2L", "2R", "3L", "3R")
cur.effect <- effects[1]
c <- chroms[1]
		cur.file <- paste("output/chrom_", c, "_", cur.effect ".pdf", sep="")
?mtext
binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p", "empirical.p.sam", "empirical.p.ore")#
binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
binding.results <- read.csv("../../sequencing_scripts/motifscan_genes/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
colnames(binding.results) <- binding.cols
binding.cols <- c("fbgn", "llr.sam", "llr.ore", "llr.diff", "gc", "size", "empirical.p", "empirical.p.sam", "empirical.p.ore")#
binding.colclasses <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")#
binding.results <- read.csv("../../sequencing_scripts/binding_sites/SAM_ORE_binding_results_bygene_double.csv", header=TRUE, colClasses=binding.colclasses)#
colnames(binding.results) <- binding.cols
head(binding.results)
colors()
head(binding.results)
plot(x=1:10, y=1:10, col=1:10, type="p")
plot(x=1:20, y=1:20, col=1:20, type="p", pch=3)
plot(x=1:20, y=1:20, col="orange", type="p", pch=3)
